import unittest
import os

from fort_charis_options.source_parser import CppSource

from fort_charis_options import generate_template


class GenerateTemplateTest(unittest.TestCase):
    EXAMPLE_PATH = os.path.join(
        os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "examples"
    )

    def setUp(self):
        self.definitions = CppSource.Parse(
            os.path.join(self.EXAMPLE_PATH, "nested.hpp")
        )

    def test_fail(self):
        with self.assertRaisesRegex(RuntimeError, "could not found 'foo'"):
            generate_template(self.definitions, "foo")

    def test_work(self):
        self.skipTest("WIP")
        self.maxDiff = None
        self.assertEqual(
            generate_template(self.definitions, "Options"),
            """/* this file was automatically generated by fort_charis_options, do not edit it */
#include <fort/charis/Options.hpp>

fort::options::OptionsParser CreateOptionsParser(Options & opts) {
    using namespace fort::options;
    const auto res = OptionParser::Create();
    res->AddOption({.ShortFlag = '\0',.Name='resolution.width',.Description="Resolution's width",.Required=false});
    res->AddOption({.ShortFlag = '\0',.Name='resolution.height',.Description="Resolution's height",.Required=false});
    return res;
}
""",
        )
